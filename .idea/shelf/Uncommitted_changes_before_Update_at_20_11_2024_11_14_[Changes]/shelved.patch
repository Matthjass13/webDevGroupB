Index: ressources/js/Level.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Pirate } from './Pirate.js';\r\nimport { ScoreBoard } from './ScoreBoard.js';\r\nimport { Coin } from \"./Coin.js\";\r\n\r\n/**\r\n * This class displays a level.\r\n * The player should press P to pause,\r\n * press R to reset the game,\r\n * and press B to go back to the game title screen.\r\n * @author Matthias Gaillard\r\n */\r\n\r\nexport class Level {\r\n\r\n    constructor(ctx, game) {\r\n        this.ctx = ctx;\r\n        this.game = game;\r\n        this.paused = false;\r\n        this.WIDTH = ctx.canvas.width;\r\n        this.HEIGHT = ctx.canvas.height;\r\n\r\n        this.bgImage = new Image();\r\n        this.bgImage.src = \"ressources/images/game/level/background/field.png\";\r\n\r\n        this.pirate = new Pirate(this.ctx.canvas.width / 2,\r\n            this.ctx.canvas.height / 2,\r\n            1);\r\n        this.scoreBoard = new ScoreBoard(0, 0);\r\n        this.keysDown = {};\r\n\r\n        this.then = Date.now();\r\n        this.setupKeyboardListeners();\r\n\r\n\r\n        this.NB_COINS = 10;\r\n\r\n        this.coins = new Array(this.NB_COINS);\r\n        this.coins.fill().forEach((_, i) => this.coins[i]\r\n            = new Coin(Math.floor(Math.random()*(this.WIDTH-Coin.WIDTH)),\r\n                       Math.floor(Math.random()*(this.HEIGHT-Coin.HEIGHT))));\r\n\r\n\r\n    }\r\n\r\n    start() {\r\n        this.paused = false;\r\n        this.play();\r\n    }\r\n\r\n    stop() {\r\n        this.paused = true;\r\n        this.clear();\r\n    }\r\n\r\n\r\n    setupKeyboardListeners() {\r\n        addEventListener(\"keydown\", (e) => {\r\n            this.keysDown[e.keyCode] = true;\r\n        }, false);\r\n\r\n        addEventListener(\"keyup\", (e) => {\r\n            delete this.keysDown[e.keyCode];\r\n        }, false);\r\n        addEventListener(\"keydown\", (e) => {\r\n            this.keysDown[e.keyCode] = true;\r\n            if (e.key === \"p\" || e.key === \"P\") {\r\n                this.togglePause();\r\n            }\r\n            if (e.key === \"b\" || e.key === \"B\") {\r\n                this.game.switchTo(\"Menu\");\r\n            }\r\n            if (e.key === \"r\" || e.key === \"R\") {\r\n                this.reset();\r\n            }\r\n        }, false);\r\n\r\n        addEventListener(\"keyup\", (e) => {\r\n            delete this.keysDown[e.keyCode];\r\n        }, false);\r\n\r\n    }\r\n\r\n\r\n    update(modifier) {\r\n        this.pirate.update(modifier, this.keysDown);\r\n        this.pirate.x = Math.max(0, Math.min(this.pirate.x, this.ctx.canvas.width - this.pirate.RUNNING_SPRITE_WIDTH));\r\n        this.pirate.y = Math.max(0, Math.min(this.pirate.y, this.ctx.canvas.height - this.pirate.RUNNING_SPRITE_HEIGHT));\r\n\r\n        for(let coin of this.coins) {\r\n            if(this.pirate.touch(coin)) {\r\n                coin.collected = true;\r\n                ++this.scoreBoard.nbCoins;\r\n                this.pirate.gainWeight(coin);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    draw() {\r\n        this.ctx.drawImage(this.bgImage, 0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        this.scoreBoard.draw(this.ctx);\r\n        for(let coin of this.coins)\r\n            coin.draw(this.ctx);\r\n        this.pirate.render(this.ctx);\r\n    }\r\n\r\n\r\n    play() {\r\n\r\n        if (this.paused) return;\r\n\r\n        let now = Date.now();\r\n        let delta = now - this.then;\r\n\r\n        this.update(delta / 1000);\r\n        this.draw();\r\n\r\n        this.then = now;\r\n\r\n        window.requestAnimationFrame(() => this.play());\r\n    }\r\n\r\n    clear() {\r\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n    }\r\n\r\n\r\n    togglePause() {\r\n        this.paused = !this.paused;\r\n        if (!this.paused) {\r\n            this.then = Date.now();\r\n            this.play();\r\n        }\r\n    }\r\n\r\n\r\n    reset() {\r\n        this.scoreBoard.reset();\r\n        this.pirate.reset();\r\n        this.coins.fill().forEach((_, i) => this.coins[i]\r\n            = new Coin(Math.floor(Math.random()*(this.WIDTH-Coin.WIDTH)),\r\n            Math.floor(Math.random()*(this.HEIGHT-Coin.HEIGHT))));\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ressources/js/Level.js b/ressources/js/Level.js
--- a/ressources/js/Level.js	(revision 6784ae02027a63810997a83ab60e72702cfcff6a)
+++ b/ressources/js/Level.js	(date 1731942840449)
@@ -24,7 +24,7 @@
 
         this.pirate = new Pirate(this.ctx.canvas.width / 2,
             this.ctx.canvas.height / 2,
-            1);
+            0);
         this.scoreBoard = new ScoreBoard(0, 0);
         this.keysDown = {};
 
